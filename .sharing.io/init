#!/bin/bash -x

#
# script for initialisation with https://github.com/sharingio/pair instances
#

export TMATE_SOCKET="${TMATE_SOCKET:-/tmp/ii.default.target.iisocket}"
export SCRIPT_PATH="$(dirname $(realpath $0))"

function wait-for-window {
    WINDOW="${1:-}"
    until tmate -S "${TMATE_SOCKET}" list-windows | grep "${WINDOW:-}"; do
        sleep 1s
    done
    sleep 1s
}

GUEST_GREETER_MESSAGE="Welcome to Pairing on FlatTrack with Pair. Guests will be able to login with emails like 'USERNAME@pair.${SHARINGIO_PAIR_BASE_DNS_NAME}' and a default password of 'P@ssw0rd123!'"

if [ -f /var/run/secrets/kubernetes.io/serviceaccount/namespace ]; then
    export SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE="${SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE:-flattrack-dev}"

    kubectl get ns $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE || kubectl create ns $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE
    kubectl label ns $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE cert-manager-tls=sync

    /usr/local/bin/tmate-wait-for-socket.sh

    cat <<EOF > "$PWD/.env"
APP_DB_USERNAME=flattrack
APP_DB_PASSWORD=flattrack
APP_DB_DATABASE=flattrack
APP_DB_HOST=postgres.flattrack-dev

APP_DIST_FOLDER=./web/dist
APP_URL=https://flattrack.${SHARINGIO_PAIR_BASE_DNS_NAME}

APP_METRICS_ENABLED=false
APP_HEALTH_ENABLED=false

POSTGRES_DB=flattrack
POSTGRES_USER=flattrack
POSTGRES_PASSWORD=flattrack
PGDATABASE=flattrack
PGUSER=flattrack

APP_SETUP_MESSAGE="$GUEST_GREETER_MESSAGE"
APP_LOGIN_MESSAGE="$GUEST_GREETER_MESSAGE"
EOF

    kubectl -n $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE apply -k deployments/k8s-manifests/development/postgres/

    until kubectl -n $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE get pod postgres-0; do echo "waiting for postgres"; sleep 1s; done

    echo "Building Backend"
    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n backend bash
    (
        wait-for-window backend
        tmate -S $TMATE_SOCKET send-keys -t backend "kubectl -n $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE wait --for=condition=ready pod -l app=postgres --timeout=200s && sleep 2s" Enter
        tmate -S $TMATE_SOCKET send-keys -t backend "go run ." Enter
    ) &

    echo "Building Frontend"
    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD/web" -n frontend bash
    (
        wait-for-window frontend
        tmate -S $TMATE_SOCKET send-keys -t frontend "npm i" Enter
        tmate -S $TMATE_SOCKET send-keys -t frontend "npm run build" Enter
    ) &

    echo "Postgres"
    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n postgres bash
    (
        wait-for-window postgres
        tmate -S $TMATE_SOCKET send-keys -t postgres "kubectl -n $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE wait --for=condition=ready pod -l app=postgres --timeout=200s && sleep 2s" Enter
        tmate -S $TMATE_SOCKET send-keys -t postgres "psql \"postgres://flattrack:flattrack@postgres.flattrack-dev/flattrack\"" Enter
    ) &

    if [ ! "$FLATTRACK_INIT_COLLABORATORS_DISABLE" ] && [ ! -z "$SHARINGIO_PAIR_GUEST_NAMES" ]; then
        echo "Init Collaborators"
        tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n init-collaborators bash
        (
            wait-for-window init-collaborators
            tmate -S $TMATE_SOCKET send-keys -t init-collaborators "export DEFAULT_SUBDOMAIN_NAME=flattrack-dev && export FLATTRACK_DEV_HOSTNAME=\"\$DEFAULT_SUBDOMAIN_NAME.$SHARINGIO_PAIR_BASE_DNS_NAME\" $(cat .env | xargs)" Enter
            tmate -S $TMATE_SOCKET send-keys -t init-collaborators "$SCRIPT_PATH/insert-collaborators.sh" Enter
        ) &
    fi
fi
