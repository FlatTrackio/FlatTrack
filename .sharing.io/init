#!/bin/bash -x

#
# script for initialisation with https://github.com/sharingio/pair instances
#

export TMATE_SOCKET="${TMATE_SOCKET:-/tmp/ii.default.target.iisocket}"
export SCRIPT_PATH="$(dirname $(realpath $0))"
export FLATTRACK_DEV_HOSTNAME="$DEFAULT_SUBDOMAIN_NAME.$SHARINGIO_PAIR_BASE_DNS_NAME"

if [ -f /var/run/secrets/kubernetes.io/serviceaccount/namespace ]; then
    export SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE="${SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE:-flattrack-dev}"

    kubectl get ns $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE || kubectl create ns $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE
    kubectl label ns $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE cert-manager-tls=sync

    /usr/local/bin/tmate-wait-for-socket.sh

    echo "Building and installing FlatTrack"
    echo "Starting Tilt"
    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n tilt bash
    tmate -S $TMATE_SOCKET send-keys -t tilt "export DEFAULT_SUBDOMAIN_NAME=flattrack-dev && export FLATTRACK_DEV_HOSTNAME=\"\$DEFAULT_SUBDOMAIN_NAME.$SHARINGIO_PAIR_BASE_DNS_NAME\"" Enter
    tmate -S $TMATE_SOCKET send-keys -t tilt "tilt up --host 0.0.0.0 --hud" Enter

    echo "Building Backend"
    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n backend bash
    tmate -S $TMATE_SOCKET send-keys -t backend "CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags \"-extldflags '-static' -s -w\" -o flattrack ./main.go" Enter

    echo "Building Frontend"
    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD/web" -n frontend bash
    tmate -S $TMATE_SOCKET send-keys -t frontend "npm i" Enter
    tmate -S $TMATE_SOCKET send-keys -t frontend "npm run build" Enter

    echo "Postgres"
    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n postgres bash
    tmate -S $TMATE_SOCKET send-keys -t postgres "kubectl -n $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE wait --for=condition=Ready pod -l app=postgres --timeout=200s" Enter
    tmate -S $TMATE_SOCKET send-keys -t postgres "psql \"postgres://flattrack:flattrack@postgres.flattrack-dev/flattrack\"" Enter

    cat <<EOF | kubectl -n $SHARINGIO_PAIR_PROJECT_DEPLOY_NAMESPACE apply -f -
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flattrack-docs
spec:
  rules:
    - host: flattrack-docs.${SHARINGIO_PAIR_BASE_DNS_NAME}
      http:
        paths:
          - backend:
              service:
                name: flattrack-docs
                port:
                  number: 8080
            path: /
  tls:
    - hosts:
        - flattrack-docs.${SHARINGIO_PAIR_BASE_DNS_NAME}
      secretName: letsencrypt-prod

EOF

    if [ ! "$FLATTRACK_INIT_COLLABORATORS_DISABLE" ]; then
        echo "Init Collaborators"
        tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n init-collaborators bash
        tmate -S $TMATE_SOCKET send-keys -t init-collaborators "export FLATTRACK_DEV_HOSTNAME=$FLATTRACK_DEV_HOSTNAME" Enter
        tmate -S $TMATE_SOCKET send-keys -t init-collaborators "$SCRIPT_PATH/insert-collaborators.sh" Enter
    fi
fi
