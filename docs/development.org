#+TITLE: Development
#+AUTHOR: Caleb Woodbine <calebwoodbine.public@gmail.com>

* Development
In-cluster local development is recommended, use [[https://minikube.sigs.k8s.io][minikube]] or [[https://kind.sigs.k8s.io/][kind]].

** Standard flow (recommended)

Why use this flow?
#+begin_quote
It's the simplest and requires the least dependencies
#+end_quote

Requirements:
- [[https://golang.org/doc/install][golang]]
- [[https://nodejs.org/en/download/][nodejs]]
- a [[https://www.postgresql.org/download/][Postgres]] database

Notes:
- work nice and easy off of your plain host with basic utilities available

*** Set up Postgres

Docker:
#+begin_src shell
  docker run -d \
         --name flattrack-postgres \
         -p 5432:5432 \
         -e POSTGRES_DB=flattrack \
         -e POSTGRES_USER=flattrack \
         -e POSTGRES_PASSWORD=flattrack \
         postgres:12.2-alpine
#+end_src

Ubuntu/Debian:
#+begin_src shell
  sudo apt install postgresql
  sudo -u postgres createuser --interactive
  sudo -u postgres createdb flattrack
  sudo adduser flattrack
#+end_src

Manually connecting to the Postgres database:
#+begin_src shell
  psql -U flattrack -d flattrack -w -h localhost
#+end_src
(entering the password as FlatTrack)

*** Frontend build
Navigate to the ~web~ folder.

Install Frontend dependencies
#+begin_src shell
  npm i
#+end_src

Build the frontend
#+begin_src shell
  npm run build
#+end_src

*** Backend build

Navigate to the root of the repo.

Build the backend
#+begin_src shell
  go build -o bin/flattrack ./main.go
#+end_src

*** Write an environment file

Write the credientials for the database into ~.env~
#+begin_src shell
APP_DB_USERNAME=flattrack
APP_DB_PASSWORD=flattrack
APP_DB_DATABASE=flattrack
APP_DB_HOST=localhost
#+end_src

*** Start the backend
#+begin_src
  ./flattrack
#+end_src

** Managed flow

Why use this flow?
#+begin_quote
Some may see great value in development being really close to production.
With this kind of flow, development is really close to what many run for production.
#+end_quote

Requirements:
- local Kubernetes instance ([[https://kind.sigs.k8s.io/#installation-and-usage][kind]], [[https://minikube.sigs.k8s.io/docs/start/][minikube]], etc...)
- [[https://kubernetes.io/docs/tasks/tools/install-kubectl/][kubectl]]
- [[https://tilt.dev][tilt]]
- [[https://helm.sh/docs/intro/install/][helm]]
- [[https://golang.org/doc/install][golang]]
- [[https://nodejs.org/en/download/][nodejs]]

Contains:
- Postgres

Notes:
- will automatically build a container with local Docker or Podman, push it into the cluster. Will be accessible from a NodePort or http://localhost:8080
- this will use ~dev.Dockerfile~ which only copies built resources into a scratch container

Create a local cluster with kind or minikube according to their respective instructions.

Start Tilt
#+begin_src shell
tilt up --host 0.0.0.0
#+end_src

Build the backend:
#+begin_src shell
CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-extldflags '-static' -s -w" -o bin/flattrack ./main.go
#+end_src

Build the frontend:
#+name: Build the frontend
#+begin_src shell
npm run build
#+end_src

Notes:
- this is the quickest development cycle factoring:
  - multi-stage build
  - components
  - setup

*** Extra
The frontend supports webpack hot reloading (rebuilding are serving after each change).
To use hot reloading, use:
#+begin_src shell
npm start
#+end_src

The frontend will serve on [[http://localhost:8081][localhost:8081]] and talk to the backend on [[http://localhost:8080][localhost:8080]].

** Manual flow

Why use this flow?
#+begin_quote
This flow is similar to the standard flow, except it uses a Postgres database out of a local Kubernetes cluster
#+end_quote

Develop on a localhost with a Postgres instance existing in a Kubernetes cluster

Note:
- this flow does not deal with any container images
- Postgres can be local or remote, it just should be available

*** Bring up the deployments
   #+begin_src shell
   kubectl apply -k deployments/k8s-manifests/development/postgres
   #+end_src
   
*** Port-forward the database connection   
   #+begin_src shell
   kubectl -n flattrack-dev port-forward service/postgres 5432:5432
   #+end_src

*** Backend
    #+begin_src shell
    go build -o bin/flattrack ./main.go && ./flattrack
    #+end_src

*** Frontend
Install frontend dependencies:
    #+name: Install frontend dependencies
    #+begin_src shell
    npm i
    #+end_src

Build the frontend:
    #+name: Build the frontend
    #+begin_src shell
    npm run build
    #+end_src

** Additional
*** Remove migrations   
   #+begin_src shell
   gomigrate -source "file://$(pwd)/migrations" -database postgres://flattrack:flattrack@localhost/flattrack?sslmode=disable down
   #+end_src

*** Manually connecting to the Postgres database in a Kubernetes cluster
   #+begin_src shell
   kubectl -n flattrack-dev exec -it postgres-0 -- psql
   #+end_src

** Project structure and details
*** API
Written in golang, the API is located in [[https://gitlab.com/flattrack/flattrack/-/tree/master/pkg/routes][pkg/routes]].

The features and areas are separated into packages.

**** Testing
Tests are located in [[https://gitlab.com/flattrack/flattrack/-/tree/master/test/backend/e2e][test/backend/e2e]]. So far there are only e2e tests for FlatTrack's API.

*** Frontend
Written in Vue.js + JavaScript, the frontend is located in [[https://gitlab.com/flattrack/flattrack/-/tree/master/test/frontend][web]].

The frontend makes requests to the backend to perform actions.

*** Database
The migrations and database structuring is located in [[https://gitlab.com/flattrack/flattrack/-/tree/master/migrations][migrations]].
Each table is created with [[https://github.com/golang-migrate/migrate][golang-migrate]].

*** Assets
Images are located in [[https://gitlab.com/flattrack/flattrack/-/tree/master/web/assets][web/assets]], these are used throughout the project (such as in the frontend, and readme).

** Docs
To run the docs in development, use:
#+begin_src sh
  firn serve
#+end_src

** Making a release checklist
Things to do before making a release:
- update helm chart version
- ensure docs represent the latest changes
- ensure linting passes

