stages:
  - lint
  - test
  - build
  - zip
  - pages

variables:
  ARCH_DEFAULT: "amd64"
  ARCHES: amd64 arm64
  APP_BUILD_VERSION: 0.0.0
  APP_BUILD_MODE: development
  POSTGRES_DB: flattrack
  POSTGRES_USER: flattrack
  POSTGRES_PASSWORD: flattrack

.kaniko-build-pre-script: &kaniko-build-pre-script |
  set -x
  mkdir -p /kaniko/.docker
  echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json

.kaniko-build-taggable-name: &kaniko-build-taggable-name |
  set -x
  COMMIT_HASH="???"
  BUILD_DATE="$(date -u +%Y-%m-%d_%I:%M:%S%p)"
  if [[ -z "$CI_COMMIT_TAG" ]]; then
    COMMIT_HASH="$CI_COMMIT_SHORT_SHA"
    PRINTABLE_COMMIT_HASH="-$COMMIT_HASH"
  fi
  if [[ ! "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]] && [[ -z "$CI_COMMIT_TAG" ]]; then
    BRANCH_NAME="-$CI_COMMIT_BRANCH"
  fi
  ARCH_TAGGABLE_NAME="$(echo $ARCH | tr -d '/')"
  if [[ ! "$ARCH" = "$ARCH_DEFAULT" ]]; then
    PRINT_ARCH="-$ARCH_TAGGABLE_NAME"
  fi

.kaniko-pre-build-release-version: &kaniko-pre-build-release-version |
  if [[ ! -z "$CI_COMMIT_TAG" ]]; then
    export APP_BUILD_VERSION="$CI_COMMIT_TAG"
    export APP_BUILD_MODE=production
    export KANIKO_EXTRA_DESTINATION="--destination $CI_REGISTRY_IMAGE:$APP_BUILD_VERSION$PRINT_ARCH"
  fi

.kaniko-build: &kaniko-build |
  /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:latest$BRANCH_NAME$PRINT_ARCH $KANIKO_EXTRA_DESTINATION --build-arg GOARCH="ARCH" --build-arg AppBuildVersion="$APP_BUILD_VERSION" --build-arg AppBuildDate="$BUILD_DATE" --build-arg AppBuildHash="$COMMIT_HASH" --build-arg AppBuildMode="$APP_BUILD_MODE"

.zip-prepare: &zip-prepare |
  export RELEASE_FOLDER_NAME="flattrack$BRANCH_NAME$PRINTABLE_COMMIT_HASH"
  mkdir -p $RELEASE_FOLDER_NAME

build-container-amd64:
  stage: build
  image: gcr.io/kaniko-project/executor:debug-v1.0.0
  retry: 2
  variables:
    ARCH: "amd64"
  before_script:
    - *kaniko-build-pre-script
    - *kaniko-build-taggable-name
    - *kaniko-pre-build-release-version
  script:
    - *kaniko-build

build-container-arm64:
  stage: build
  image: docker:stable
  image: gcr.io/kaniko-project/executor:debug-v1.0.0
  retry: 2
  variables:
    ARCH: "arm64/v8"
  only:
    - tags
    - master
  before_script:
    - *kaniko-build-pre-script
    - *kaniko-build-taggable-name
    - *kaniko-pre-build-release-version
  script:
    - *kaniko-build

build-zip-frontend:
  stage: build
  retry: 2
  image: node:14.7.0-alpine3.11
  before_script:
    - *kaniko-build-taggable-name
    - *kaniko-pre-build-release-version
    - *zip-prepare
    - npm i
  script:
    - ./node_modules/.bin/vue-cli-service build --dest $RELEASE_FOLDER_NAME/dist src/frontend/main.js
  only:
    - tags
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - flattrack*

build-zip-backend:
  stage: build
  retry: 2
  image: golang:1.14.6-alpine3.11
  before_script:
    - *kaniko-build-taggable-name
    - *kaniko-pre-build-release-version
    - *zip-prepare
  script:
    - |
      AppBuildVersion="$APP_BUILD_VERSION"
      AppBuildHash="$COMMIT_HASH"
      AppBuildDate="$BUILD_DATE"
      AppBuildMode="$APP_BUILD_MODE"
      for ARCH in $ARCHES; do
        echo "Building backend for $ARCH";
        PRINTABLE_ARCH="-$ARCH"
        if [ $ARCH = $ARCH_DEFAULT ]; then
          PRINTABLE_ARCH=
        fi
        CGO_ENABLED=0 GOOS=linux GOARCH="$ARCH" go build \
          -a \
          -installsuffix cgo \
          -ldflags "-extldflags '-static' -s -w \
          -X gitlab.com/flattrack/flattrack/src/backend/common.AppBuildVersion=$AppBuildVersion \
          -X gitlab.com/flattrack/flattrack/src/backend/common.AppBuildHash=$AppBuildHash \
          -X gitlab.com/flattrack/flattrack/src/backend/common.AppBuildDate=$AppBuildDate \
          -X gitlab.com/flattrack/flattrack/src/backend/common.AppBuildMode=$AppBuildMode" \
          -o $RELEASE_FOLDER_NAME/flattrack$PRINTABLE_ARCH \
          src/backend/main.go
      done
  only:
    - tags
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - flattrack*

build-zip-copy-extras:
  stage: build
  retry: 2
  image: alpine:3.11
  before_script:
    - *kaniko-build-taggable-name
    - *kaniko-pre-build-release-version
    - *zip-prepare
  script:
    - cp -r migrations $RELEASE_FOLDER_NAME/migrations
    - cp -r templates $RELEASE_FOLDER_NAME/templates
  only:
    - tags
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - flattrack*

build-zip:
  stage: zip
  retry: 2
  image: alpine:3.11
  dependencies:
    - build-zip-frontend
    - build-zip-backend
    - build-zip-copy-extras
  before_script:
    - *kaniko-build-taggable-name
    - *kaniko-pre-build-release-version
    - *zip-prepare
  script:
    - tar cvf $RELEASE_FOLDER_NAME.tar.gz $RELEASE_FOLDER_NAME
  only:
    - tags
    - master
  artifacts:
    paths:
      - flattrack*.tar.gz

test_backend_e2e:
  stage: test
  image: golang:1.13.10-alpine3.11
  variables:
    APP_DB_HOST: postgres
    CGO_ENABLED: "0"
  services:
    - postgres:12.2-alpine
  before_script:
    - apk add git gcc
    - go get github.com/onsi/ginkgo/ginkgo
    - go get github.com/onsi/gomega/...
    - go build -o flattrack src/backend/main.go
    - ./flattrack &
  script:
    - ginkgo -r --randomizeAllSpecs --randomizeSuites --failOnPending --cover --trace --progress test/backend/e2e
  after_script:
    - kill $(jobs -l | awk '{print $2}')
    
lint_frontend:
  stage: lint
  image: node:12.10.0-alpine
  allow_failure: true
  before_script:
    - npm i
  script:
    - npm run lint

lint_backend:
  stage: lint
  image: golang:1.13.10-alpine3.11
  allow_failure: true
  before_script:
    - apk add git gcc
    - go get -u golang.org/x/lint/golint
  script:
    - golint -set_exit_status src/backend/... test/backend/e2e/...

pages:
  image: python:3.8-buster
  stage: pages
  before_script:
    - pip install mkdocs-material
  script:
  - rm -r public
  - mkdocs build
  - mv site public
  artifacts:
    paths:
    - public
  only:
    - master

