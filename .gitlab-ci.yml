stages:
  - lint
  - test
  - build

cache:
  key: shared-cache
  paths:
    - .npm
    - /go

variables:
  ARCHES: "linux/amd64,linux/arm/v7,linux/arm64"
  APP_BUILD_VERSION: 0.0.0
  APP_BUILD_MODE: development
  POSTGRES_DB: flattrack
  POSTGRES_USER: flattrack
  POSTGRES_PASSWORD: flattrack

.docker-build-pre-script: &docker-build-pre-script |
  set -x
  if ! docker info &>/dev/null; then
    if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
      export DOCKER_HOST='tcp://localhost:2375'
    fi
  fi
  mkdir -p $HOME/.docker/cli-plugins
  wget -O $HOME/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64
  chmod +x $HOME/.docker/cli-plugins/docker-buildx 
  docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  docker buildx create --use --name builder
  docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  apk add git

.docker-pre-build-release-version: &docker-pre-build-release-version |
  export APP_BUILD_VERSION="$CI_COMMIT_TAG"
  export APP_BUILD_MODE=production
  export DOCKER_EXTRA_DESTINATION="-t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

.docker-build: &docker-build |
  docker buildx build --build-arg AppBuildVersion="$APP_BUILD_VERSION" --build-arg AppBuildDate="$(date -u +%Y-%m-%d_%I:%M:%S%p)" --build-arg AppBuildHash="$(git rev-parse --short HEAD)" --build-arg AppBuildMode="$APP_BUILD_MODE" --platform $ARCHES -f $CI_PROJECT_DIR/Dockerfile --push -t $CI_REGISTRY_IMAGE:latest $DOCKER_EXTRA_DESTINATION $CI_PROJECT_DIR

build:
  stage: build
  image: docker:stable
  retry: 2
  services:
    - docker:stable-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - *docker-build-pre-script
  script:
    - *docker-build
  except:
    - tags

build-release:
  stage: build
  image: docker:stable
  retry: 2
  services:
    - docker:stable-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - *docker-build-pre-script
  script:
    - *docker-pre-build-release-version
    - *docker-build
  only:
    - tags

test_backend_e2e:
  stage: test
  image: golang:1.13.10-alpine3.11
  variables:
    APP_DB_HOST: postgres
    CGO_ENABLED: "0"
  services:
    - postgres:12.2-alpine
  before_script:
    - apk add git gcc
    - go get github.com/onsi/ginkgo/ginkgo
    - go get github.com/onsi/gomega/...
    - go build -o flattrack src/backend/main.go
    - ./flattrack &
  script:
    - ginkgo -r --randomizeAllSpecs --randomizeSuites --failOnPending --cover --trace --progress test/backend/e2e
    
lint_frontend:
  stage: lint
  image: node:12.10.0-alpine
  allow_failure: true
  before_script:
    - npm i
  script:
    - npm run lint

lint_backend:
  stage: lint
  image: golang:1.13.10-alpine3.11
  allow_failure: true
  before_script:
    - apk add git gcc
    - go get -u golang.org/x/lint/golint
  script:
    - golint -set_exit_status src/backend/...

pages:
  image: python:3.8-buster
  before_script:
    - pip install mkdocs-material
  script:
  - rm -r public
  - mkdocs build
  - mv site public
  artifacts:
    paths:
    - public
  only:
    - master

