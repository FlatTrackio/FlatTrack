stages:
  - lint
  - test
  - pages
  - build
  - zip

include:
  template: Dependency-Scanning.gitlab-ci.yml

variables:
  ARCH_DEFAULT: amd64
  ARCHES: amd64 arm64
  APP_BUILD_VERSION: 0.0.0
  APP_BUILD_MODE: development
  POSTGRES_DB: flattrack
  POSTGRES_USER: flattrack
  POSTGRES_PASSWORD: flattrack
  REGISTRIES: $CI_REGISTRY docker.io

.kaniko-build-pre-script: &kaniko-build-pre-script |
  set -x
  mkdir -p /kaniko/.docker
  cat << EOF > /kaniko/.docker/config.json
  {
    "auths": {
      "$CI_REGISTRY": {
        "username": "$CI_REGISTRY_USER",
        "password": "$CI_REGISTRY_PASSWORD"
      },
      "https://index.docker.io/v1/": {
        "auth": "$DOCKERHUB_AUTH"
      }
    }
  }

.kaniko-build-taggable-name: &kaniko-build-taggable-name |
  set -x
  COMMIT_HASH="???"
  BUILD_DATE="$(date -u +%Y-%m-%d_%I:%M:%S%p)"
  if [[ -z "$CI_COMMIT_TAG" ]]; then
    COMMIT_HASH="$CI_COMMIT_SHORT_SHA"
    PRINTABLE_COMMIT_HASH="-$COMMIT_HASH"
  fi
  if [[ ! "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]] && [[ -z "$CI_COMMIT_TAG" ]]; then
    BRANCH_NAME="-$CI_COMMIT_BRANCH"
  fi
  ARCH_TAGGABLE_NAME="$(echo $ARCH | tr -d '/')"
  if [[ ! "$ARCH" = "$ARCH_DEFAULT" ]]; then
    PRINT_ARCH="-$ARCH_TAGGABLE_NAME"
  fi
  export CI_PROJECT_PATH=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')

.kaniko-prepare-version-tags: &kaniko-prepare-version-tags |
  if [[ ! -z "$CI_COMMIT_TAG" ]]; then
    export APP_BUILD_VERSION="$CI_COMMIT_TAG"
    export APP_BUILD_MODE=production
    for reg in $REGISTRIES; do
      export KANIKO_RELEASE_DESTINATIONS="$KANIKO_RELEASE_DESTINATIONS --destination $reg/$CI_PROJECT_PATH:$APP_BUILD_VERSION$PRINT_ARCH"
    done
  fi
  for reg in $REGISTRIES; do
    export KANIKO_DESTINATIONS="$KANIKO_DESTINATIONS --destination $reg/$CI_PROJECT_PATH:latest$BRANCH_NAME$PRINT_ARCH"
  done

.kaniko-build: &kaniko-build |
  /kaniko/executor \
    --snapshotMode=redo \
    --context $CI_PROJECT_DIR \
    --dockerfile $CI_PROJECT_DIR/build/Dockerfile \
    --build-arg GOARCH="$ARCH" \
    --build-arg AppBuildVersion="$APP_BUILD_VERSION" \
    --build-arg AppBuildDate="$BUILD_DATE" \
    --build-arg AppBuildHash="$COMMIT_HASH" \
    --build-arg AppBuildMode="$APP_BUILD_MODE" \
    $KANIKO_DESTINATIONS \
    $KANIKO_RELEASE_DESTINATIONS

.zip-prepare: &zip-prepare |
  export RELEASE_FOLDER_NAME="flattrack$BRANCH_NAME$PRINTABLE_COMMIT_HASH"
  mkdir -p $RELEASE_FOLDER_NAME

.build-container: &build-container
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug-v1.3.0
    entrypoint: [""]
  retry: 2
  before_script:
    - *kaniko-build-pre-script
    - *kaniko-build-taggable-name
    - *kaniko-prepare-version-tags
  script:
    - *kaniko-build

build-container-amd64:
  <<: *build-container
  variables:
    ARCH: "amd64"

build-container-arm64:
  <<: *build-container
  variables:
    ARCH: "arm64"
  only:
    - tags
    - master

build-zip-frontend:
  stage: build
  retry: 2
  image: node:14.7.0-alpine3.11
  before_script:
    - *kaniko-build-taggable-name
    - *kaniko-prepare-version-tags
    - *zip-prepare
    - cd web
    - npm i
  script:
    - ./node_modules/.bin/vue-cli-service build --dest $CI_PROJECT_DIR/$RELEASE_FOLDER_NAME/dist ./src/main.js
  only:
    - tags
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - flattrack*/

build-zip-backend:
  stage: build
  retry: 2
  image: golang:1.14.6-alpine3.11
  before_script:
    - *kaniko-build-taggable-name
    - *kaniko-prepare-version-tags
    - *zip-prepare
  script:
    - |
      AppBuildVersion="$APP_BUILD_VERSION"
      AppBuildHash="$COMMIT_HASH"
      AppBuildDate="$BUILD_DATE"
      AppBuildMode="$APP_BUILD_MODE"
      for ARCH in $ARCHES; do
        echo "Building backend for $ARCH";
        PRINTABLE_ARCH="-$ARCH"
        if [ $ARCH = $ARCH_DEFAULT ]; then
          PRINTABLE_ARCH=
        fi
        CGO_ENABLED=0 GOOS=linux GOARCH="$ARCH" go build \
          -a \
          -installsuffix cgo \
          -ldflags "-extldflags '-static' -s -w \
          -X gitlab.com/flattrack/flattrack/pkg/common.AppBuildVersion=$AppBuildVersion \
          -X gitlab.com/flattrack/flattrack/pkg/common.AppBuildHash=$AppBuildHash \
          -X gitlab.com/flattrack/flattrack/pkg/common.AppBuildDate=$AppBuildDate \
          -X gitlab.com/flattrack/flattrack/pkg/common.AppBuildMode=$AppBuildMode" \
          -o $RELEASE_FOLDER_NAME/flattrack$PRINTABLE_ARCH \
          main.go
      done
  only:
    - tags
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - flattrack*

build-zip-copy-extras:
  stage: build
  retry: 2
  image: alpine:3.11
  before_script:
    - *kaniko-build-taggable-name
    - *kaniko-prepare-version-tags
    - *zip-prepare
  script:
    - cp -r migrations $RELEASE_FOLDER_NAME/migrations
    - cp -r templates $RELEASE_FOLDER_NAME/templates
  only:
    - tags
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - flattrack*

build-zip:
  stage: zip
  retry: 2
  image: alpine:3.11
  dependencies:
    - build-zip-frontend
    - build-zip-backend
    - build-zip-copy-extras
  before_script:
    - *kaniko-build-taggable-name
    - *kaniko-prepare-version-tags
    - *zip-prepare
  script:
    - tar cvf $RELEASE_FOLDER_NAME.tar.gz $RELEASE_FOLDER_NAME
  only:
    - tags
    - master
  artifacts:
    paths:
      - flattrack*.tar.gz

test_backend_e2e:
  stage: test
  image: golang:1.13.10-alpine3.11
  variables:
    APP_DB_HOST: postgres
    CGO_ENABLED: "0"
  services:
    - postgres:12.2-alpine
  before_script:
    - apk add git gcc
    - go get github.com/onsi/ginkgo/ginkgo
    - go get github.com/onsi/gomega/...
    - go build -o flattrack main.go
    - ./flattrack &
  script:
    - ginkgo -r --randomizeAllSpecs --randomizeSuites --failOnPending --cover --trace --progress test/backend/e2e
    - pkill flattrack || true

spell_check:
  stage: lint
  image: golang:1.13.10-alpine3.11
  allow_failure: true
  before_script:
    - go get -u github.com/client9/misspell/cmd/misspell
  script:
    - misspell -error src docs migrations pubic template k8s-manifests README*
    
lint_frontend:
  stage: lint
  image: node:12.10.0-alpine
  allow_failure: true
  before_script:
    - cd web
    - npm i
  script:
    - npm run lint

lint_backend:
  stage: lint
  image: golang:1.13.10-alpine3.11
  allow_failure: true
  before_script:
    - apk add git gcc
    - go get -u golang.org/x/lint/golint
  script:
    - echo -e "GOLINT\n"
    - golint -set_exit_status ./...
    - echo -e "GOFMT\n"
    - gofmt -d .

lint_helm_chart:
  stage: lint
  image: alpine:3.11
  variables:
    HELM_LINK: https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
    HELM_HASH: 270acb0f085b72ec28aee894c7443739271758010323d72ced0e92cd2c96ffdb
  allow_failure: true
  before_script:
    - apk add curl
    - curl -L -o helm.tar.gz $HELM_LINK
    - |
        if [ ! $(sha256sum helm.tar.gz) = $HELM_HASH ]; then
          exit 1
        fi
    - cat helm.tar.gz | tar --directory /usr/local/bin --extract -xz --strip-components 1 linux-amd64/helm
  script:
    - helm lint deployments/flattrack

pages:
  image:
    # use temporary firn container image instead of theiceshelf/firn image, until tagging is in CI
    name: registry.gitlab.com/bobymcbobs/container-images/firn:0.0.13-alpha.0
    entrypoint: [""]
  stage: pages
  before_script:
    - cd docs
  script:
  - firn build
  - mv _firn/_site ../public
  artifacts:
    paths:
    - public
  only:
    - master
